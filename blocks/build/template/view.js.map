{"version":3,"file":"template/view.js","mappings":"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","sources":["webpack://@prc/facets-blocks/./src/template/view.js"],"sourcesContent":["/**\n * WordPress Dependencies\n */\nimport {\n\tstore,\n\tgetContext,\n\tgetServerState,\n\twithSyncEvent,\n\tgetElement,\n} from '@wordpress/interactivity';\n\n/**\n * Internal Dependencies\n */\n\nfunction formatCount(count) {\n\treturn 250 <= count ? '250+' : count;\n}\n\nfunction getPropertyFromObjects(property, searchValue, values) {\n\tconst choice = values.find((c) => c.value === searchValue);\n\treturn choice ? choice[property] : null;\n}\n\nconst { state, actions } = store('prc-platform/facets-context-provider', {\n\tstate: {\n\t\tget choices() {\n\t\t\tconst context = getContext();\n\t\t\tconst { facetSlug, limit, facetType } = context;\n\t\t\tif (!facetSlug) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\tif (!state.facets[facetSlug]) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\tif ('dropdown' === facetType) {\n\t\t\t\treturn [...state.facets[facetSlug].choices].sort((a, b) => {\n\t\t\t\t\t// Check if both values are numbers\n\t\t\t\t\tconst aNum = Number(a.label);\n\t\t\t\t\tconst bNum = Number(b.label);\n\t\t\t\t\tif (!isNaN(aNum) && !isNaN(bNum)) {\n\t\t\t\t\t\treturn bNum - aNum; // Reversed the order\n\t\t\t\t\t}\n\t\t\t\t\t// Otherwise sort alphabetically in reverse\n\t\t\t\t\treturn b.label.localeCompare(a.label); // Reversed the order\n\t\t\t\t});\n\t\t\t}\n\t\t\tconst choices = state.facets[facetSlug].choices;\n\t\t\t// Sort choices to put selected ones first and then by count\n\t\t\tconst sortedChoices = [...choices].sort((a, b) => {\n\t\t\t\tconst aSelected = state.facets[facetSlug].selected.includes(\n\t\t\t\t\ta.value\n\t\t\t\t);\n\t\t\t\tconst bSelected = state.facets[facetSlug].selected.includes(\n\t\t\t\t\tb.value\n\t\t\t\t);\n\t\t\t\t// First sort by selection status\n\t\t\t\tif (aSelected !== bSelected) {\n\t\t\t\t\treturn bSelected - aSelected; // Selected items come first\n\t\t\t\t}\n\t\t\t\t// Then sort by count\n\t\t\t\treturn b.count - a.count;\n\t\t\t});\n\t\t\treturn sortedChoices.slice(0, limit);\n\t\t},\n\t\tget expandedChoices() {\n\t\t\tconst context = getContext();\n\t\t\tconst { facetSlug } = context;\n\t\t\tif (!state.facets[facetSlug]) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\tconst choices = state.facets[facetSlug].choices;\n\t\t\t// Filter out both selected choices and choices already in the main list\n\t\t\tconst filteredChoices = choices.filter((choice) => {\n\t\t\t\tconst isSelected = state.facets[facetSlug].selected.includes(\n\t\t\t\t\tchoice.value\n\t\t\t\t);\n\t\t\t\tconst isInMainList = state.choices.includes(choice);\n\t\t\t\treturn !isSelected && !isInMainList;\n\t\t\t});\n\t\t\t// Sort remaining choices by count\n\t\t\treturn filteredChoices.sort((a, b) => b.count - a.count);\n\t\t},\n\t\tget hasChoices() {\n\t\t\tconst context = getContext();\n\t\t\tconst { facetSlug } = context;\n\t\t\tconst { facets } = state;\n\t\t\treturn facets[facetSlug].choices.length > 0;\n\t\t},\n\t\tget hasSelections() {\n\t\t\tconst context = getContext();\n\t\t\tconst { facetSlug } = context;\n\t\t\tconst { facets } = state;\n\t\t\treturn facets[facetSlug].selected.length > 0;\n\t\t},\n\t\tget hasExpandedChoices() {\n\t\t\treturn state.expandedChoices && state.expandedChoices.length > 0;\n\t\t},\n\t\tget isExpanded() {\n\t\t\tconst context = getContext();\n\t\t\tconst { expanded } = context;\n\t\t\treturn expanded;\n\t\t},\n\t\t// Input Elements State:\n\t\tget isInputChecked() {\n\t\t\tconst context = getContext();\n\t\t\tconst { choice, facetSlug } = context;\n\t\t\tconst { value } = choice;\n\t\t\tconst { facets } = state;\n\t\t\treturn facets[facetSlug].selected.includes(value);\n\t\t},\n\t\tget isInputDisabled() {\n\t\t\tconst context = getContext();\n\t\t\tconst { choice } = context;\n\t\t\tconst { value, label, facetSlug } = choice;\n\t\t\tconst count = getPropertyFromObjects(\n\t\t\t\t'count',\n\t\t\t\tvalue,\n\t\t\t\tstate.facets[facetSlug].choices\n\t\t\t);\n\t\t\tif (count === 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\tget isInputError() {\n\t\t\treturn false;\n\t\t},\n\t\tget isInputSuccess() {\n\t\t\treturn false;\n\t\t},\n\t\tget isInputRequired() {\n\t\t\treturn false;\n\t\t},\n\t\tget isInputProcessing() {\n\t\t\treturn false;\n\t\t},\n\t\tget isInputHidden() {\n\t\t\treturn false;\n\t\t},\n\t\tget isInputReadOnly() {\n\t\t\treturn false;\n\t\t},\n\t\tget inputName() {\n\t\t\tconst context = getContext();\n\t\t\tconst { choice } = context;\n\t\t\treturn choice.slug;\n\t\t},\n\t\tget inputLabel() {\n\t\t\tconst context = getContext();\n\t\t\tconst { choice } = context;\n\t\t\tconst { value, label, facetSlug } = choice;\n\t\t\tconst count = getPropertyFromObjects(\n\t\t\t\t'count',\n\t\t\t\tvalue,\n\t\t\t\tstate.facets[facetSlug].choices\n\t\t\t);\n\t\t\treturn `${label} (${formatCount(count)})`;\n\t\t},\n\t\tget inputId() {\n\t\t\tconst context = getContext();\n\t\t\tconst { choice } = context;\n\t\t\tconst { slug, term_id } = choice;\n\t\t\treturn `facet_${slug}_${term_id}`;\n\t\t},\n\t\tget inputValue() {\n\t\t\tconst context = getContext();\n\t\t\tconst { choice } = context;\n\t\t\treturn choice.value;\n\t\t},\n\t\tget inputPlaceholder() {\n\t\t\tconst context = getContext();\n\t\t\tconst { placeholder, facetType, facetSlug } = context;\n\t\t\tlet _placeholder = `Select ${placeholder}`;\n\t\t\tif (\n\t\t\t\t'dropdown' === facetType &&\n\t\t\t\tstate.facets[facetSlug].selected.length > 0\n\t\t\t) {\n\t\t\t\t// Get the first value out of selected as a string\n\t\t\t\tconst firstValue =\n\t\t\t\t\tstate.facets[facetSlug].selected[0].toString();\n\t\t\t\t_placeholder = firstValue\n\t\t\t\t\t.replace(/-/g, ' ')\n\t\t\t\t\t.replace(/\\b\\w/g, (l) => l.toUpperCase());\n\t\t\t}\n\t\t\treturn _placeholder;\n\t\t},\n\t\tget isSelected() {\n\t\t\tconst context = getContext();\n\t\t\tconst { choice } = context;\n\t\t\tconst { tokens } = state;\n\t\t\tconst { value } = choice;\n\t\t\treturn tokens.includes(value);\n\t\t},\n\t\t/**\n\t\t * For Form-Input-Select Exclusively:\n\t\t */\n\t\tget isOpen() {\n\t\t\tconst { expanded } = getContext();\n\t\t\treturn expanded;\n\t\t},\n\t\tget inputOptions() {\n\t\t\tconst context = getContext();\n\t\t\tconst { facetSlug, facetType, searchTerm } = context;\n\t\t\tconst { choices } = getServerState().facets[facetSlug];\n\t\t\tlet newChoices = choices;\n\n\t\t\t// Filter choices based on search term.\n\t\t\tif (searchTerm && searchTerm.length > 0 && choices) {\n\t\t\t\tconst filteredChoices = choices.filter((choice) =>\n\t\t\t\t\tchoice.label\n\t\t\t\t\t\t.toLowerCase()\n\t\t\t\t\t\t.includes(searchTerm.toLowerCase())\n\t\t\t\t);\n\t\t\t\tif (filteredChoices.length > 0) {\n\t\t\t\t\tnewChoices = filteredChoices;\n\t\t\t\t} else {\n\t\t\t\t\tnewChoices = choices;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Return the choices as an array of objects with the following properties:\n\t\t\t// - value: The value of the choice.\n\t\t\t// - label: The label of the choice.\n\t\t\treturn newChoices.map((choice) => {\n\t\t\t\treturn {\n\t\t\t\t\tvalue: choice.value,\n\t\t\t\t\tlabel: `${choice.label} (${formatCount(choice.count)})`,\n\t\t\t\t};\n\t\t\t});\n\t\t},\n\t\tget hasValue() {\n\t\t\tconst context = getContext();\n\t\t\tconst { facetSlug } = context;\n\t\t\tconst { selected } = state.facets[facetSlug];\n\t\t\treturn selected.length > 0;\n\t\t},\n\t\tget hasClearIcon() {\n\t\t\treturn false;\n\t\t},\n\t\tget activeIndex() {\n\t\t\tconst context = getContext();\n\t\t\tconst { activeIndex } = context;\n\t\t\treturn activeIndex || 0;\n\t\t},\n\t},\n\tactions: {\n\t\t/**\n\t\t * When clicking on the clear button, clear the facet from the selections.\n\t\t */\n\t\tclearFacet: () => {\n\t\t\tconst { facetSlug } = getContext();\n\t\t\tactions.onClear(facetSlug);\n\t\t},\n\t\t*onInputMouseEnter() {\n\t\t\tconst context = getContext();\n\t\t\tconst { facetSlug, value, selected } = context;\n\t\t\tconst currentSelected = selected || [];\n\t\t\tconst nextSelected = { ...currentSelected, [value]: value };\n\t\t\tconst nextUrl = actions.constructNewUrl(nextSelected);\n\t\t\t// Prefetch the possible next url.\n\t\t\tyield actions.prefetch(nextUrl);\n\t\t},\n\t\tonInputMouseLeave: withSyncEvent((event) => {\n\t\t\t// console.log('onInputMouseLeave', event);\n\t\t}),\n\t\tonInputFocus: withSyncEvent((event) => {\n\t\t\tconst context = getContext();\n\t\t\tconst { facetType } = context;\n\t\t\tif ('dropdown' === facetType) {\n\t\t\t\tcontext.expanded = !context.expanded;\n\t\t\t}\n\t\t}),\n\t\tonInputBlur: withSyncEvent((event) => {\n\t\t\t// By default this runs on the on-blur directive on the input element\n\t\t\t// but we also use it as a shortcut to close the listbox on click,\n\n\t\t\t// Because the on-blur event fires before the click event\n\t\t\t// we need to slow things down a bit, 150 ms should do it...\n\t\t\tlet isRunning = false;\n\t\t\tif (!isRunning) {\n\t\t\t\tisRunning = true;\n\t\t\t\tconst context = getContext();\n\t\t\t\tconst { facetType } = context;\n\t\t\t\tif ('dropdown' === facetType) {\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tcontext.expanded = false;\n\t\t\t\t\t\tisRunning = false;\n\t\t\t\t\t}, 150);\n\t\t\t\t}\n\t\t\t}\n\t\t}),\n\t\tonInputKeyDown: withSyncEvent((event) => {\n\t\t\tevent.preventDefault();\n\t\t\tconst context = getContext();\n\t\t\tif ('dropdown' !== context.facetType) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (event.key === 'Enter') {\n\t\t\t\tconst { activeIndex, facetSlug } = context;\n\t\t\t\tconst { inputOptions, selected } = state;\n\t\t\t\tconst { value } = inputOptions[activeIndex];\n\n\t\t\t\tselected[facetSlug] = [value];\n\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tcontext.expanded = false;\n\t\t\t\t}, 150);\n\t\t\t}\n\t\t}),\n\t\tonInputKeyUp: withSyncEvent((event) => {\n\t\t\tconst context = getContext();\n\t\t\tconst { expanded, facetType } = context;\n\t\t\tif ('dropdown' !== facetType) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Update the search term.\n\t\t\tcontext.searchTerm = event.target.value;\n\n\t\t\tif (!expanded) {\n\t\t\t\tcontext.expanded = true;\n\t\t\t}\n\t\t\tif (event.keyCode === 40 && event.key === 'ArrowDown') {\n\t\t\t\tactions.moveThroughChoices(1, event.target);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (event.keyCode === 38 && event.key === 'ArrowUp') {\n\t\t\t\tactions.moveThroughChoices(-1, event.target);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// if escape key, close the listbox\n\t\t\tif (event.key === 'Escape') {\n\t\t\t\tcontext.expanded = false;\n\t\t\t}\n\t\t}),\n\t\tonDropdownArrowClick: withSyncEvent((event) => {\n\t\t\tconst context = getContext();\n\t\t\tconst { facetType } = context;\n\t\t\tif ('dropdown' === facetType) {\n\t\t\t\tcontext.expanded = !context.expanded;\n\t\t\t}\n\t\t}),\n\t\tmoveThroughChoices: (direction, ref) => {\n\t\t\tconst { inputOptions } = state;\n\t\t\tconst { activeIndex } = getContext();\n\n\t\t\t// Determine next active index.\n\t\t\tlet nextActive = null;\n\t\t\tif (activeIndex === null || isNaN(activeIndex)) {\n\t\t\t\tnextActive = 0;\n\t\t\t} else {\n\t\t\t\tnextActive = activeIndex + direction;\n\t\t\t}\n\t\t\tif (nextActive < 0) {\n\t\t\t\tnextActive = inputOptions.length - 1;\n\t\t\t}\n\t\t\tif (nextActive >= inputOptions.length) {\n\t\t\t\tnextActive = 0;\n\t\t\t}\n\n\t\t\t// Get the next active value.\n\t\t\tconst nextActiveValue = inputOptions[nextActive].value;\n\t\t\t// And then scroll the listbox to the active item.\n\t\t\tconst listbox = ref.parentElement.parentElement.querySelector(\n\t\t\t\t'.wp-block-prc-block-form-input-select__list'\n\t\t\t);\n\t\t\tconst activeItem = listbox.querySelector(\n\t\t\t\t`[data-ref-value=\"${nextActiveValue}\"]`\n\t\t\t);\n\t\t\tif (activeItem) {\n\t\t\t\t// Remove the active class from the previous active item.\n\t\t\t\tconst previousActive = listbox.querySelector('.is-selected');\n\t\t\t\tif (previousActive) {\n\t\t\t\t\tpreviousActive.classList.remove('is-selected');\n\t\t\t\t}\n\t\t\t\tactiveItem.classList.add('is-selected');\n\t\t\t\tactiveItem.scrollIntoView({\n\t\t\t\t\tblock: 'nearest',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tgetContext().activeIndex = nextActive;\n\t\t},\n\t\tonInputOptionClick: withSyncEvent((event) => {\n\t\t\tconst context = getContext();\n\t\t\tconst { facetSlug, choice } = context;\n\t\t\tconst { selected } = state;\n\t\t\tconst { value } = choice;\n\t\t\tselected[facetSlug] = [value];\n\t\t}),\n\t\tonInputCheckboxClick: withSyncEvent((event) => {\n\t\t\tconst context = getContext();\n\t\t\tconst { choice, facetSlug } = context;\n\t\t\tconst { selected } = state;\n\t\t\tconst { value, type } = choice;\n\t\t\tif (state.isInputDisabled) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!selected[facetSlug] || selected[facetSlug].length === 0) {\n\t\t\t\tselected[facetSlug] = [value];\n\t\t\t} else if (selected[facetSlug].includes(value)) {\n\t\t\t\tselected[facetSlug] = selected[facetSlug].filter(\n\t\t\t\t\t(item) => item !== value\n\t\t\t\t);\n\t\t\t} else if ('radio' === type) {\n\t\t\t\tselected[facetSlug] = [value];\n\t\t\t} else {\n\t\t\t\tselected[facetSlug] = [...selected[facetSlug], value];\n\t\t\t}\n\t\t}),\n\t\t/**\n\t\t * When clicking on the facet expanded button, toggle the expanded state.\n\t\t */\n\t\tonExpand: () => {\n\t\t\tconst context = getContext();\n\t\t\tcontext.expanded = !context.expanded;\n\t\t},\n\t\tonCollapse: () => {\n\t\t\t// By default this runs on the on-blur directive on the input element\n\t\t\t// but we also use it as a shortcut to close the listbox on click,\n\t\t\t// Because the on-blur event fires before the click event\n\t\t\t// we need to slow things down a bit, 150 ms should do it...\n\t\t\tconst context = getContext();\n\t\t\tlet isRunning = false;\n\t\t\tif (!isRunning) {\n\t\t\t\tisRunning = true;\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tcontext.expanded = false;\n\t\t\t\t\tisRunning = false;\n\t\t\t\t}, 150);\n\t\t\t}\n\t\t},\n\t},\n\tcallbacks: {\n\t\t/**\n\t\t * When the facet is expanded, update the label to be either More or Less.\n\t\t */\n\t\tonExpand: () => {\n\t\t\tconst context = getContext();\n\t\t\tconst { expanded } = context;\n\t\t\tif (expanded) {\n\t\t\t\tcontext.expandedLabel = '- Less';\n\t\t\t} else {\n\t\t\t\tcontext.expandedLabel = '+ More';\n\t\t\t}\n\t\t},\n\t},\n});\n"],"names":["formatCount","count","getPropertyFromObjects","property","searchValue","values","choice","find","c","value","state","actions","store","choices","context","getContext","facetSlug","limit","facetType","facets","sort","a","b","aNum","Number","label","bNum","isNaN","localeCompare","aSelected","selected","includes","bSelected","slice","expandedChoices","filter","isSelected","isInMainList","hasChoices","length","hasSelections","hasExpandedChoices","isExpanded","expanded","isInputChecked","isInputDisabled","isInputError","isInputSuccess","isInputRequired","isInputProcessing","isInputHidden","isInputReadOnly","inputName","slug","inputLabel","inputId","term_id","inputValue","inputPlaceholder","placeholder","_placeholder","toString","replace","l","toUpperCase","tokens","isOpen","inputOptions","searchTerm","getServerState","newChoices","filteredChoices","toLowerCase","map","hasValue","hasClearIcon","activeIndex","clearFacet","onClear","onInputMouseEnter","nextSelected","nextUrl","constructNewUrl","prefetch","onInputMouseLeave","withSyncEvent","event","onInputFocus","onInputBlur","isRunning","setTimeout","onInputKeyDown","preventDefault","key","onInputKeyUp","target","keyCode","moveThroughChoices","onDropdownArrowClick","direction","ref","nextActive","nextActiveValue","listbox","parentElement","querySelector","activeItem","previousActive","classList","remove","add","scrollIntoView","block","onInputOptionClick","onInputCheckboxClick","type","item","onExpand","onCollapse","callbacks","expandedLabel"],"sourceRoot":""}
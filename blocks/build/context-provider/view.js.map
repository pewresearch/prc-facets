{"version":3,"file":"context-provider/view.js","mappings":"oGAAAA,EAAOC,QAAUC,OAAO,kC,GCCpBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,CCjBA,MAAM,aAAEQ,GAAiBC,OAAOC,GAAGC,KAE7B,MAAEC,EAAK,QAAEC,GAAYC,EAAM,uCAAwC,CACxEF,MAAO,CACNG,wBAAyB,IACzBC,cAAe,IACfC,cAAc,EACdC,cAAc,EACd,YAAIC,GACH,OAAOP,GAAOQ,YAAYC,WAAa,CACxC,EACA,aAAIC,GACH,OAAOV,GAAOQ,YAAYC,YAAc,CACzC,EACA,qBAAIE,GACH,OAAOC,IAAiBC,QACzB,EACA,iBAAIC,GACH,QAAIpB,IAAcM,EAAMa,SAGxB,OAAOZ,EAAQc,gBAAgBf,EAAMa,SACtC,GAEDZ,QAAS,CAMRc,eAAAA,CAAgBF,GAAW,GAC1B,MAAMG,EAAM,CAAC,EACb,IAAI,IAAUH,EACb,OAGDI,OAAOC,KAAKL,GAAUM,QAASC,IAE1BA,EAAIC,WAAWrB,EAAMsB,QACxBN,EAAII,GAAOP,EAASO,GACVG,MAAMC,QAAQX,EAASO,IACjCJ,EAAI,GAAGhB,EAAMsB,SAASF,KAASP,EAASO,GAAKK,KAAK,KAElDT,EAAI,GAAGhB,EAAMsB,SAASF,KAASP,EAASO,KAI1CH,OAAOC,KAAKF,GAAKG,QAASC,IAGR,KAAbJ,EAAII,IAAmC,iBAAbJ,EAAII,WAC1BJ,EAAII,KAIb,MAGMM,EAHY7B,OAAO8B,SAASC,KAAKC,MAAM,KAAK,GAGjBC,QAAQ,gBAAiB,KAC1D,OAAOlC,EAAa8B,EAAgBV,EACrC,EAKA,cAACe,GACA,MAAMC,EAAanC,OAAO8B,SAASC,KAC7BK,EAASjC,EAAMc,cAErB,GAAImB,IAAWD,EAKd,OAUDhC,EAAMM,cAAe,EAGrB,MAAM4B,QAAe,4CACfA,EAAOjC,QAAQkC,SAASF,GAU9B,MAAMG,EAAcxB,IACpBZ,EAAMqC,OAASD,EAAYC,OAC3BrC,EAAMsC,OAASF,EAAYE,OAK3B,MAAM,IAAEC,GAAQC,IACZD,EACHA,EAAIE,eAAe,CAClBC,SAAU,SACVC,MAAO,UAGR9C,OAAO+C,SAAS,CACfC,IAAK,EACLH,SAAU,WAIZ1C,EAAMM,cAAe,CACtB,EAOA,SAACwC,CAASb,GACT,MAAMC,QAAe,sCACjBlC,EAAM+C,WAAWC,SAASf,KAG9BjC,EAAM+C,WAAWE,KAAKhB,SAChBC,EAAOjC,QAAQ6C,SAASb,GAC/B,EAOAiB,QAASA,CAACC,EAAWC,EAAa,QAGjC,MAAMC,EAAoBrD,EAAMa,SAGhC,OAAKsC,EAQDC,GACHC,EAAkBF,GAAaE,EAC9BF,GACCG,OAAQC,GAASA,IAASH,QAC5BpD,EAAMa,SAAW,IAAKwC,MAIvBA,EAAkBF,GAAa,GAC/BnD,EAAMa,SAAW,IAAKwC,GACfrD,EAAMa,WAjBZb,EAAMa,SAAW,CAAC,OAClBZ,EAAQ8B,mBAmBXyB,UAAW,CAIVC,WAAAA,GACC,MAAM5C,EAAWb,EAAMa,SACJI,OAAOC,KAAKL,GAAU6C,QAEvB,EAIjB1D,EAAM2D,YAAa,GAInB1D,EAAQ8B,gBACR/B,EAAM2D,YAAa,EAErB,EAMAC,gBAAAA,GAEK5D,EAAMK,aACTL,EAAMa,SAASgD,kBAAmB,SAE3B7D,EAAMa,SAASgD,gBAExB","sources":["webpack://@prc/facets-blocks/external import \"@wordpress/interactivity-router\"","webpack://@prc/facets-blocks/webpack/bootstrap","webpack://@prc/facets-blocks/./src/context-provider/view.js"],"sourcesContent":["module.exports = import(\"@wordpress/interactivity-router\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * WordPress Dependencies\n */\nimport { store, getElement, getServerState } from '@wordpress/interactivity';\n\nconst { addQueryArgs } = window.wp.url;\n\nconst { state, actions } = store('prc-platform/facets-context-provider', {\n\tstate: {\n\t\tmouseEnterPreFetchTimer: 500,\n\t\tnavigateTimer: 1000,\n\t\tepSortByDate: false,\n\t\tisProcessing: false,\n\t\tget hasPosts() {\n\t\t\treturn state?.pagination?.total_rows > 0;\n\t\t},\n\t\tget postCount() {\n\t\t\treturn state?.pagination?.total_rows || 0;\n\t\t},\n\t\tget getServerSelected() {\n\t\t\treturn getServerState().selected;\n\t\t},\n\t\tget getUpdatedUrl() {\n\t\t\tif (undefined === state.selected) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn actions.constructNewUrl(state.selected);\n\t\t},\n\t},\n\tactions: {\n\t\t/**\n\t\t * Construct the new url to route to by adding the selected facets to the query args.\n\t\t * @param {boolean|object} selected\n\t\t * @return\n\t\t */\n\t\tconstructNewUrl(selected = false) {\n\t\t\tconst tmp = {};\n\t\t\tif (false === selected) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Construct a comma separated string for each selected facet.\n\t\t\tObject.keys(selected).forEach((key) => {\n\t\t\t\t// If the key already has ep_ prefixed then add it directly\n\t\t\t\tif (key.startsWith(state.urlKey)) {\n\t\t\t\t\ttmp[key] = selected[key];\n\t\t\t\t} else if (Array.isArray(selected[key])) {\n\t\t\t\t\ttmp[`${state.urlKey}${key}`] = selected[key].join(',');\n\t\t\t\t} else {\n\t\t\t\t\ttmp[`${state.urlKey}${key}`] = selected[key];\n\t\t\t\t}\n\t\t\t});\n\t\t\t// Double check tmp, if it has a key with empty value, remove it.\n\t\t\tObject.keys(tmp).forEach((key) => {\n\t\t\t\t// Check if tmp[key] is an empty string or an empty array.\n\t\t\t\t// CHeck if tmp[key] is equal to an object...\n\t\t\t\tif (tmp[key] === '' || typeof tmp[key] === 'object') {\n\t\t\t\t\tdelete tmp[key];\n\t\t\t\t}\n\t\t\t});\n\t\t\t// Remove any existing query args from the url.\n\t\t\tconst stableUrl = window.location.href.split('?')[0];\n\t\t\t// Remove any references to /page/1/ or /page/2/ etc,\n\t\t\t// we need to send the user back to the first page.\n\t\t\tconst stableUrlClean = stableUrl.replace(/\\/page\\/\\d+\\//, '/');\n\t\t\treturn addQueryArgs(stableUrlClean, tmp);\n\t\t},\n\t\t/**\n\t\t * Update the results by using the router to navigate to the new url.\n\t\t * Scroll's the user to the top of the page, gracefully.\n\t\t */\n\t\t*updateResults() {\n\t\t\tconst currentUrl = window.location.href;\n\t\t\tconst newUrl = state.getUpdatedUrl;\n\n\t\t\tif (newUrl === currentUrl) {\n\t\t\t\t// console.log(\n\t\t\t\t// \t'Facets_Context_Provider -> updateResults::',\n\t\t\t\t// \t'no change in url'\n\t\t\t\t// );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// console.log(\n\t\t\t// \t'Facets_Context_Provider -> updateResults::',\n\t\t\t// \tstate,\n\t\t\t// \tcurrentUrl,\n\t\t\t// \tnewUrl\n\t\t\t// );\n\n\t\t\tstate.isProcessing = true;\n\n\t\t\t// Process the new url. This will hit the server and return the new state.\n\t\t\tconst router = yield import('@wordpress/interactivity-router');\n\t\t\tyield router.actions.navigate(newUrl);\n\n\t\t\t// console.log(\n\t\t\t// \t'YIELD: Facets_Context_Provider <- updateResults::',\n\t\t\t// \tgetServerState(),\n\t\t\t// \tcurrentUrl,\n\t\t\t// \tnewUrl\n\t\t\t// );\n\n\t\t\t// Update local state with state from the server.\n\t\t\tconst serverState = getServerState();\n\t\t\tstate.facets = serverState.facets;\n\t\t\tstate.tokens = serverState.tokens;\n\n\t\t\t// console.log('Facets Global State Update::', state.facets);\n\n\t\t\t// Scroll to the top of the page.\n\t\t\tconst { ref } = getElement();\n\t\t\tif (ref) {\n\t\t\t\tref.scrollIntoView({\n\t\t\t\t\tbehavior: 'smooth',\n\t\t\t\t\tblock: 'start',\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\twindow.scrollTo({\n\t\t\t\t\ttop: 0,\n\t\t\t\t\tbehavior: 'smooth',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tstate.isProcessing = false;\n\t\t},\n\t\t/**\n\t\t * Check if the newUrl is already in the prefetched array, if not add\n\t\t * it and then prefetch the newUrl.\n\t\t * @param {string} newUrl\n\t\t * @return\n\t\t */\n\t\t*prefetch(newUrl) {\n\t\t\tconst router = yield import('@wordpress/interactivity-router');\n\t\t\tif (state.prefetched.includes(newUrl)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tstate.prefetched.push(newUrl);\n\t\t\tyield router.actions.prefetch(newUrl);\n\t\t},\n\t\t/**\n\t\t * Clear a facet or a facet value from the selected state.\n\t\t * @param {string}     facetSlug\n\t\t * @param {string|int} facetValue\n\t\t * @return\n\t\t */\n\t\tonClear: (facetSlug, facetValue = null) => {\n\t\t\t// Because onClear actions occur after routing\n\t\t\t// has occured we need to get the selected from the server state.\n\t\t\tconst currentlySelected = state.selected;\n\n\t\t\t// If there is no facetSlug then clear all selected facets and run updateResults.\n\t\t\tif (!facetSlug) {\n\t\t\t\tstate.selected = {};\n\t\t\t\tactions.updateResults();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If there is a facet value remove it from the given\n\t\t\t// facetSlug but keep the other selected facets.\n\t\t\tif (facetValue) {\n\t\t\t\tcurrentlySelected[facetSlug] = currentlySelected[\n\t\t\t\t\tfacetSlug\n\t\t\t\t].filter((item) => item !== facetValue);\n\t\t\t\tstate.selected = { ...currentlySelected };\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcurrentlySelected[facetSlug] = [];\n\t\t\tstate.selected = { ...currentlySelected };\n\t\t\treturn state.selected;\n\t\t},\n\t},\n\tcallbacks: {\n\t\t/**\n\t\t * When a facet is selected, we need to update the results.\n\t\t */\n\t\tonSelection() {\n\t\t\tconst selected = state.selected;\n\t\t\tconst keysLength = Object.keys(selected).length;\n\t\t\t// No selections? Disable updates.\n\t\t\tif (keysLength <= 0) {\n\t\t\t\t// console.log(\n\t\t\t\t// \t'Facets_Context_Provider -> onSelection:: FALSE NO SELECTIONS'\n\t\t\t\t// );\n\t\t\t\tstate.isDisabled = true;\n\t\t\t} else {\n\t\t\t\t// Once we have some selections, lets run a refresh.\n\t\t\t\t// console.log('Facets_Context_Provider -> onSelection::', state);\n\t\t\t\tactions.updateResults();\n\t\t\t\tstate.isDisabled = false;\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * When the epSortByDate flag is toggled on add ep_sort__by_date\n\t\t * to selected and run updateResults. This will hit the server\n\t\t * and return the new post list sorted by date.\n\t\t */\n\t\tonEpSortByUpdate() {\n\t\t\t// if epSortByDate is true then add to selected 'ep_sort__by_date' and run updateResults\n\t\t\tif (state.epSortByDate) {\n\t\t\t\tstate.selected.ep_sort__by_date = true;\n\t\t\t} else {\n\t\t\t\tdelete state.selected.ep_sort__by_date;\n\t\t\t}\n\t\t},\n\t},\n});\n"],"names":["module","exports","import","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","addQueryArgs","window","wp","url","state","actions","store","mouseEnterPreFetchTimer","navigateTimer","epSortByDate","isProcessing","hasPosts","pagination","total_rows","postCount","getServerSelected","getServerState","selected","getUpdatedUrl","constructNewUrl","tmp","Object","keys","forEach","key","startsWith","urlKey","Array","isArray","join","stableUrlClean","location","href","split","replace","updateResults","currentUrl","newUrl","router","navigate","serverState","facets","tokens","ref","getElement","scrollIntoView","behavior","block","scrollTo","top","prefetch","prefetched","includes","push","onClear","facetSlug","facetValue","currentlySelected","filter","item","callbacks","onSelection","length","isDisabled","onEpSortByUpdate","ep_sort__by_date"],"sourceRoot":""}